List:
list = ["Bob", "Rolf", "Anne"]
Add element to list:
list.append("Smith")
Remove element from list:
list.remove("Bob")



Tuple:
Items cannot be added or removed from Tuple
tuple = ("Bob", "Rolf", "Anne")



Set:
Cannot have duplicated items
Sets don't have order. You cannot print set[0] for example 
set = {"Bob", "Rolf", "Anne"}
Add element to sets:
set.add("Smith")
smith will be added in to the set randomly (not at the end of the set)

Getting the difference between 2 sets:

friends = {"Bob", "Rolf", "Anne"}
abroad = {"Bob", "Anne"}
local_friends= friends.difference(abroad)
print(local_friends)

Will print Rolf

If done the other way:
friends = {"Bob", "Rolf", "Anne"}
abroad = {"Bob", "Anne"}
local_friends= abroad.difference(friends)
print(local_friends)

It will print an empty set (set())

This function prints what is different from one set to the other. if the set "calling the function" doesn't have a value  from the other set, that value is not considered by the function.Â´

Other functions:
friends.union(abroad) = union of both sets (no duplicates)
friends.intersecection(abroad) = intersection of both sets (common values)

Ifs:
day_of_week = input("What day is it today?")
if day_of_week == "Monday":
    print("Have a good Monday!")
elif day_of_week = "Tuesday":
    print ("Have a good Tuesday!")
else:
    print("lol")
print("This always runs")

In:
list =  ["Bob", "Rolf", "Anne"]
if "Bob" in list:
    print("Bob is in the list")
'Bob' in 'My name is Bob' will also return true.

Loops:
number = 2
user_input = input("Would you like to play? y/n")
while user_input != "n":
    user_number = int (input("Guess the number: "))
    if user_number == 2:
        print ("You won!")
    else:
        print ("Try again")


To break the loop type "break":
    if user_input == "n"
        break



For loop:
friends = ["Bob", "Rolf", "Anne"]
for friend in friend:
    print(f"{friend} is my friend")

Normal For:
for i in range(4)


Functions:
grades = [35, 67, 98, 100, 100]
total = sum(grades)
amount = len(grades) #lenght of the list

List comprehensions:
numbers = [1, 3, 5]
doubled = [x * 2 for x in numbers] #for loop inside the list that doubles the numbers of the "numbers" list

Dictionaries: (key value)
friend_ages = {"Rolf": 24, "Adam": 30, "Anne": 27}
Add entry:
friend_ages["Bob"] = 20

List of dictionaries:
friends = [
    {"name": "Rolf", "age": 24},
    {"name": "Adam", "age": 30},
    {"name": "Anne", "age": 27},
]

Access dictionaries in a loop:
student_attendance = {"Rolf": 96, "Bob": 80, "Anne": 100}
for student, attendance in student_attendance.items():
    print(f"{student}: {attendance}")


Print value using key:
student_attendance = {"Rolf": 96, "Bob": 80, "Anne": 100}
print(student_attendance["Rolf"])


my_dictionary = {'a': 1, 'b': 2, 'c': 3}
items = list(my_dictionary.items())
print(items)
Prints:
[('a': 1, 'b': 2, 'c': 3)]

head, *tail = [1, 2, 3, 4, 5]
print(head) - prints 1
print(tail) - prints [3,4,5]



Function:
friends = ["Rolf", "Bob"]

def add_friend():
    friend_name = input("Enter your friend's name: ")
    friends = friends + [friend_name]

add_friend()

Variables inside functions only exist inside that function unless they are specified as "global"
global x = "lol"

Functions with parameters:
def add_friend(name, surname):
    print(f"{name} and {surname})

add_friend("Bob", "Anne")

Default parameters:
def add_friend(x, y=6):

the default value always has to be in the end.
def add_friend(x=5, y):   this doesnt work


Return functions:
def divide(dividend, divisor):
    if divisor != 0:
        return dividend / divisor
    else: 
        return: "You fool!"

Lambdas:
Basically a variable with a function

lambda x, y : x + y



Access a dictionary:

student = {'name':'Jose',
           'school':'Computing',
           'grades':(66, 77, 88)}

Given a dictionary of students:
def average_grade_all_students(student_list):
    total = 0
    count = 0
    for student in student_list:
        total = total + sum(student['grades'])
        count = count + len(student['grades'])
    return total / count


Defining classes:
__innit__ is like the java constructor

class Student:
    def __innit__(self):
        self.name = "Rolf"  #This class has the default name of "Rolf"
        self.grades = (90, 90, 93, 78, 90)
    
    def average(self):
        return sum (self.grades) / len(self.grades)
When you create an instance of a class, the __innit__ method runs and creates an instance with the parameters given.

Getting the average of an instance that already exists:
myStudentInstance = Student()
print(Student.average(myStudentInstance))

Defining classe with parameters:
class Student:
    def __innit__(self, name, grades):
        self.name = name
        self.grades = grades
    
    def average(self):
        return sum (self.grades) / len(self.grades)
myStudentInstance = Student("Bob", (90, 90, 93, 78, 90))


To String method: (python calls this method when you try to print an object)
Class Person:
    def __innit__(self, name, age):
        self.name = name
        self.age = age
    
    def __str__(self):
        return f"Person {self.name}, {self.age} years old."

    def __repr__(self):
        return f"<Person('{self.name}', '{self.age}')>"

__repr__ is less ambiguos than __str__ but __str__ overrides __repr__






Defining a classe's static method / class method and instance method:
class ClassTest:

    def instance_method(self):
        print(f"Called instance_method of {self}")

    @classmethod
    def class_method(cls):
        print(f"Called class method of {cls}")

    @staticmethod
    def static_method():
        print("Called static method.")
Calling the static method:
ClassTest.static_method()

Inheritance:

class Device:
    def __innit__(self, name, connected_by):
        self.name = name
        self.connected_by = connected_by
        self.connected = True

class Printer(Device):
    def __init__(self, name, connected_by, capacity):
        super().__init___(name, connected_by)
        self.capacity = capacity
        self.remaining_pages = capacity

Printer inherits Device


Composition
A class contains another class:

class BookShelf:
    def __init__(self, *books):
        self.books = books

    def __str__(self):
        return f"BookShelf with {len(self.books)} books."

class Book:
    ...

book = Book("Harry Potter")
book2 = Book("Python 101")
shelf = BookShelf(book, book2)



Type Inting
def list_avg(sequence: list) -> float:
    return sum(sequence) / len(sequence)
This function takes a list as parameter and returns a float value.

def list_avg(sequence: list[books]) -> float:
    return ...
This function takes a list of books as parameter and returns a float value.

With variables:
text: string = "this is a string"
number: int = 12
decimal: float = 2.3

Importing functions from another folder:

import sys
from fileName import functionName

ex:
import sys
from app import get_hit_count #Will import the function called get_hit_count from the folder app.py


Try catch / errors:

def divide(dividend, divisor):
    if divisor == 0:
        raise ZeroDivisionError("Divisor cannot be 0.") #This error comes with python (ZeroDivisionError)

try:
    average = divide(sum(grades), len(grades))
except ZeroDivisionError:
    print("There are no grades yet in your list.")


try: #run this code
except: #execute this code when there's an exception
else: #no exceptions? run this code
finally: #always run this code


my_dict = {'a': 1, 'b': 2, 'c': 3}

# Convert dictionary items to a list and access the first element
first_key, first_value = list(my_dict.items())[0]













































